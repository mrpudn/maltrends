#!/usr/bin/env python3
import argparse
import json
import logging
import os
import requests
import time
from pathlib import Path


MAL_API_DOMAIN = 'api.myanimelist.net'
MAL_API_VERSION = 'v2'
MAL_API_URL = f'https://{MAL_API_DOMAIN}/{MAL_API_VERSION}'
MAL_API_URL_MANGA_RANKING = f'{MAL_API_URL}/manga/ranking'
MAL_API_URL_ANIME_RANKING = f'{MAL_API_URL}/anime/ranking'
MAL_CLIENT_ID = os.getenv('MAL_CLIENT_ID')

MAX_RECORDS_MANGA = int(os.getenv('MAX_RECORDS_MANGA', 10000))
MAX_RECORDS_ANIME = int(os.getenv('MAX_RECORDS_ANIME', 10000))

MANGA_FIELDS = [
    'id', 'title', 'main_picture', 'alternative_titles', 'start_date',
    'end_date', 'mean', 'rank', 'popularity', 'num_list_users',
    'num_scoring_users', 'nsfw', 'genres', 'media_type', 'status',
    'num_volumes', 'num_chapters', 'authors'
    # excluded fields: synopsis, created_at, updated_at
]
ANIME_FIELDS = [
    'id', 'title', 'main_picture', 'alternative_titles', 'start_date',
    'end_date', 'mean', 'rank', 'popularity', 'num_list_users',
    'num_scoring_users', 'nsfw', 'genres', 'media_type', 'status',
    'num_episodes', 'start_season', 'broadcast', 'source',
    'average_episodes_durations', 'rating', 'studios'
    # excluded fields: synopsis, created_at, updated_at
]

logger = logging.getLogger(__name__)
logging.basicConfig(
    level=os.getenv('LOG_LEVEL', 'INFO'),
    format=(
        '[%(levelname)s] %(asctime)s '
        '(%(funcName)s:%(lineno)s) '
        '%(message)s'
    )
)

parser = argparse.ArgumentParser()
parser.add_argument('target', choices=('manga', 'anime'), nargs='?')


def main():
    args = parser.parse_args()
    data_dir = Path('data')
    os.makedirs(data_dir, exist_ok=True)
    if args.target in (None, 'manga'):
        manga_path = data_dir / 'manga.jsonl'
        ranking_path = data_dir / 'manga-ranking.jsonl'
        update_manga_ranking(manga_path, ranking_path)
    if args.target in (None, 'anime'):
        anime_path = data_dir / 'anime.jsonl'
        ranking_path = data_dir / 'anime-ranking.jsonl'
        update_anime_ranking(anime_path, ranking_path)


def update_manga_ranking(manga_path, ranking_path):
    logger.info('Updating manga ranking ...')
    records = list(stream_manga_ranking())
    write_manga(records, manga_path)
    write_ranking(records, ranking_path)
    logger.info('Updated manga ranking')


def update_anime_ranking(anime_path, ranking_path):
    logger.info('Updating anime ranking ...')
    records = list(stream_anime_ranking())
    write_anime(records, anime_path)
    write_ranking(records, ranking_path)
    logger.info('Updated anime ranking')


def stream_manga_ranking(ranking_type='all', limit=500, fields=None):
    return mal_paginate(
        url=MAL_API_URL_MANGA_RANKING,
        params={
            'limit': limit,
            'offset': 0,
            'nsfw': 'true',
            'ranking_type': ranking_type,
            'fields': ','.join(fields or MANGA_FIELDS)
        },
        max_offset=MAX_RECORDS_MANGA
    )


def stream_anime_ranking(ranking_type='all', limit=500, fields=None):
    return mal_paginate(
        url=MAL_API_URL_ANIME_RANKING,
        params={
            'limit': limit,
            'offset': 0,
            'nsfw': 'true',
            'ranking_type': ranking_type,
            'fields': ','.join(fields or ANIME_FIELDS)
        },
        max_offset=MAX_RECORDS_ANIME
    )


def mal_paginate(url, params, max_offset=10000, delay=1.0):
    params = params or {}
    offset = 0
    while True:
        params['offset'] = offset
        response = mal_request_retry(url, params=params)
        response_json = response.json()
        for record in response_json.get('data'):
            yield record
        paging = response_json.get('paging')
        offset += params['limit']
        if not paging.get('next') or offset >= max_offset:
            break
        time.sleep(delay)


def mal_request_retry(*args, retries=3, delay=5.0, **kwargs):
    attempts = 0
    while True:
        attempts += 1
        try:
            response = mal_request(*args, **kwargs)
            response.raise_for_status()
            return response
        except requests.exceptions.HTTPError as err:
            if attempts > retries:
                raise err
            logger.error('\n'.join([
                'MAL request failed. Retrying ...',
                str(err),
                err.response.text
            ]))
            time.sleep(delay)


def mal_request(*args, **kwargs):
    kwargs['headers'] = kwargs.get('headers') or {}
    kwargs['headers']['Accept'] = 'application/json'
    kwargs['headers']['X-MAL-CLIENT-ID'] = MAL_CLIENT_ID
    response = requests.get(*args, **kwargs)
    response.raise_for_status()
    return response


def write_manga(records, path):
    records.sort(key=lambda r: r.get('node', {}).get('id'))
    write_jsonl(map(build_manga_record, records), path)


def build_manga_record(record):
    node = record.get('node', {})
    main_picture = node.get('main_picture', {})
    alternative_titles = node.get('alternative_titles', {})
    return [
        node.get('id'),
        node.get('title'),
        [
            main_picture.get('large'),
            main_picture.get('medium')
        ],
        [
            alternative_titles.get('synonyms'),
            alternative_titles.get('en'),
            alternative_titles.get('ja')
        ],
        node.get('start_date'),
        node.get('end_date'),
        node.get('synopsis'),
        node.get('nsfw'),
        [
            [
                genre.get('id'),
                genre.get('name')
            ]
            for genre in node.get('genres', [])
        ],
        node.get('created_at'),
        node.get('updated_at'),
        node.get('media_type'),
        node.get('status'),
        node.get('num_volumes'),
        node.get('num_chapters'),
        [
            [
                author.get('node', {}).get('id'),
                author.get('node', {}).get('first_name'),
                author.get('node', {}).get('last_name'),
                author.get('role')
            ]
            for author in node.get('authors', [])
        ]
    ]


def write_anime(records, path):
    records.sort(key=lambda r: r.get('node', {}).get('id'))
    write_jsonl(map(build_anime_record, records), path)


def build_anime_record(record):
    node = record.get('node', {})
    main_picture = node.get('main_picture', {})
    alternative_titles = node.get('alternative_titles', {})
    start_season = node.get('start_season', {})
    broadcast = node.get('broadcast', {})
    return [
        node.get('id'),
        node.get('title'),
        [
            main_picture.get('large'),
            main_picture.get('medium')
        ],
        [
            alternative_titles.get('synonyms'),
            alternative_titles.get('en'),
            alternative_titles.get('ja')
        ],
        node.get('start_date'),
        node.get('end_date'),
        node.get('synopsis'),
        node.get('nsfw'),
        [
            [
                genre.get('id'),
                genre.get('name')
            ]
            for genre in node.get('genres', [])
        ],
        node.get('created_at'),
        node.get('updated_at'),
        node.get('media_type'),
        node.get('status'),
        node.get('num_episodes'),
        [
            start_season.get('year'),
            start_season.get('season')
        ],
        [
            broadcast.get('day_of_the_week'),
            broadcast.get('start_time')
        ],
        node.get('source'),
        node.get('average_episode_duration'),
        node.get('rating'),
        [
            [
                studio.get('id'),
                studio.get('name')
            ]
            for studio in node.get('studios', [])
        ]
    ]


def write_ranking(records, path):
    records.sort(key=lambda r: r.get('node', {}).get('rank'))
    write_jsonl(map(build_ranking_record, records), path)


def build_ranking_record(record):
    node = record.get('node', {})
    return [
        node.get('id'),
        node.get('title'),
        node.get('mean'),
        node.get('rank'),
        node.get('popularity'),
        node.get('num_list_users'),
        node.get('num_scoring_users')
    ]


def write_jsonl(rows, path):
    with open(path, 'w') as file:
        for row in rows:
            file.write(f'{json.dumps(row, ensure_ascii=False)}\n')


if __name__ == '__main__':
    main()
